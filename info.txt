ZIP archive
Compress:
:> zip archive.zip file1 file2 file3
Compress a directory:
:> zip -r archive.zip dir1
Uncompress:
:> unzip archive.zip
Uncompress into given path:
:> unzip archive.zip -d ~/folder_to_put_into


Unarchive RAR with unrar
Unarchive:
:> unrar x <name>
List:
:> unrar l <name>


Create .tar.gz:
:> tar -czvf output.tar.gz input-file-or-dir
-c === create archive
-z === compress with gzip
-v === display progress
-f === specify filename
List .tar
:> tar -tvf archive.tar
-t === list contents
-v === verbose
-f === specify file
For .tar.gz add:
-z === griz the file first
Unarchive .tar.gz
:> tar -xzvf archive.tar.gz
:> tar -xzvf archive.tar.gz -C DEST_FOLDER

List 7z:
:> 7z l archive.7z
Extract here: [check out the 'e' option]
:> 7z x archive.7z
Extract into new dir:
:> 7z x -oPATH archive.7z


Powerdown
[-P(default) === powerdown, -r === reboot]
:> shutdown -P +60 === [min]
:> shutdown -P 1:00 === [1 AM]
:> shutdown -P now
:> shutdown -c === [cancel]


Brightness
[sys/class/backlight/intel_backlight]
max_brightness - const, max possible value
actual_brightness - readonly, current value(watches the 'brightness' file)
brightness - set by user, current value
:> sudo chmod a+w /sys/class/backlight/intel_backlight/brightness
:> echo "1000" > /sys/class/backlight/intel_backlight/brightness


Search the filesystem
:> grep -rnw 'PATH' -e 'PATTERN'
:> grep -rni . -e 'PATTERN'
-R === recursive. Traverse the whole tree, follow symlinks
-r === recursive. Traverse the whole tree, dont' follow symlinks
-n === show line numbers
-w === match the whole word
-l === don't show the matches, just show file names
-i === ignore case
--include=\*.{c,h}
--exclude=*.o
--exclude-dir={dir1,dir2,*.dst}


Default copy
:> cp -a source/. dest/
The -a option is an improved recursive option, that preserve all file attributes, and also preserve symlinks.
The . at end of the source path is a specific cp syntax that allow to copy all files and folders, included hidden ones.


Copy comparison
Using cp(the following two are equivalent):
:> cp -a source/. dest/source
:> cp -a source dest
Using rsync(the following two are equivalent):
:> rsync -avh --progress source/ dest/source
:> rsync -avh --progress source dest


Execute visual stuff with sudo(as root)
:> xhost +local:


To run (n)vim as sudo and properly load the .vimrc
:> sudo -E nvim ...


When errors arise from yaourt due to gpg(pgp) check fail
:> yaourt --m-arg --skipchecksums --m-arg --skippgpcheck -Sb <package>
For trizen:
:> trizen --skipinteg <operations>
(https://github.com/trizen/trizen)
:> trizen --noconfirm


For ext4 format, in fstab, don't set uid and gid(it even won't allow you),
set them through directory parameters(chmod, chown)


To mount an SD card
:> mount -t vfat /dev/mmcblk0p1 /mount/path


Create a bootable usb(or just transfer an iso to a usb) with dd:
:> sudo dd bs=4M if=/home/igorek/file.iso of=/dev/sdb status=progress oflag=sync


Font
In order to add new fonts:
1) place the folder containing a font family inside
    [/usr/share/fonts] === for all users
    [/.local/share/fonts] === for current user
    Make sure the folder and files in it can be read by everybody.
2) Make the system search for fonts in that location
    (Note: the name of the file doesn't matter, just make it {digit}{digit}-*.conf).
    [/etc/X11/xorg.conf.d/10-fonts.conf]
    "
        # Let X.Org know about the custom font directories
        Section "Files"
            FontPath    "/usr/share/fonts/100dpi"
            FontPath    "/usr/share/fonts/75dpi"
            FontPath    "/usr/share/fonts/consolas-powerline"
            FontPath    "/usr/share/fonts/cantarell"
            FontPath    "/usr/share/fonts/cyrillic"
            FontPath    "/usr/share/fonts/encodings"
            FontPath    "/usr/share/fonts/gsfonts"
            FontPath    "/usr/share/fonts/Inconsolata"
            FontPath    "/usr/share/fonts/FiraCode"
            FontPath    "/usr/share/fonts/SourceCodePro"
            FontPath    "/usr/share/fonts/InconsolataGo"
            FontPath    "/usr/share/fonts/misc"
            FontPath    "/usr/share/fonts/Mononoki"
            FontPath    "/usr/share/fonts/OTF"
            FontPath    "/usr/share/fonts/TTF"
            FontPath    "/usr/share/fonts/Type1"
            FontPath    "/usr/share/fonts/util"
        EndSection
    "
(Note: the contents of the file must correspond to dirs in the "fonts" folder).
3) Update the font cache(most likely an unnecessary step)
    :> fc-cache -fv
4) Find out the name of the font
    :> fc-list
    (Note: output to a file and do a search)
5) In .Xresources set the font by its name
6) Reload .Xresources
    :> xrdb ~/.Xresources

Just to remember:
https://seasonofcode.com/posts/how-to-set-default-fonts-and-font-aliases-on-linux.html
vim .config/fontconfig/fonts.conf
{
    <?xml version='1.0'?>
    <!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>
    <fontconfig>
    </fontconfig>
}

ChromeOs fonts:
:> trizen -S ttf-croscore


PowerTop custom service at:
/etc/systemd/system/powertop-custom.service
{
    [Unit]
    Description=Powertop tunings

    [Service]
    ExecStart=/usr/bin/powertop --auto-tune
    RemainAfterExit=true

    [Install]
    WantedBy=multi-user.target
}
Script at:
/usr/local/sbin/powertop-custom.sh


About default target(Display manager related):
https://bbs.archlinux.org/viewtopic.php?id=215694


Mounting options, permissions table
    0   1   2   3   4   5   6   7
r   +   +   +   +   -   -   -   -
w   +   +   -   -   +   +   -   -
x   +   -   +   -   +   -   +   -
(owner, group, other)
umask - everything
dmask - directories
fmask - files


Timestamps
atime - access time
mtime - modification time (-attributes)
ctime - change time       (+attributes)


Mounting external USB
1) :> mkdir /mnt/External
2) make yourself(and your group) the owner with chown
3) allow all permissions with chmod
4) when mounting, specify both uid and gid:
:> sudo mount -o uid=igorek,gid=users,fmask=111,dmask=000 /dev/sdb1 /mnt/External


Info about keybindings
:> loadkeys
:> showkey


Execute an action on file change
(<name> - file ame to watch. <action> - command-line action to perform)
:> pacman -S inotify-tools
:> while [[ 1 ]]; do inotifywait -e modify <name>; <action>; done


Create a symbolic link(symlink)
:> ln -s -T TARGET LINK_NAME


Git credentials
At home location:
:> git config --global credential.helper store
At the next promt git will remember the credentials and store them in the home folder


URXVT image preview support
The image preview methods urxvt and urxvt_full can be used with the urxvt terminal and are typically more reliable. They use a special escape sequence to change the background of the terminal in order to render the image.
Steps:
* Run urxvt with pixbuf support (some operating systems ship it without pixbuf support, but for example ArchLinux has an AUR package called rxvt-unicode-pixbuf which should work)
* Add the line set preview_images true to your ~/.config/ranger/rc.conf.
* Add the line set preview_images_method urxvt to your ~/.config/ranger/rc.conf. You can also choose urxvt-full if you would like the image to fill the whole terminal rather than just the preview pane.
* Restart ranger


Reload resources
:> xrdb ~/.Xresources
(for example, to reload XMobar settings in real time)


Startup script for LightDM
LightDM has a script /etc/lightdm/lightdm/Xsession which(at the end) calls a
user-defined script ~/.xsession


Keyboard speed
:> pacman -S xorg-xset
Temporary(not recommended, as it may be reset sometimes by something):
:> xset r rate 200 40
Permanently [~/.xserverrc]:
exec /usr/bin/Xorg -nolisten tcp -ardelay 250 -arinterval 25 "$@" vt$XDG_VTNR
(Note: The second argument, namely 25, uses delay, whereas xset uses frequency.
So, for example, xset r rate 250 40 === ... -ardelay 250 -arinterval 25
(because 1/25ms = 40Hz).)


Language
Temporary:
:> setxkbmap -model pc104 -layout us,ru -variant , -option grp:alt_shift_toggle
Permanently:
:> localectl --no-convert set-x11-keymap us,de,ru,ua pc104 ,,, grp:alt_shift_toggle


Generate assembly code with gcc
:> gcc source.c -O0 -masm=intel -S -o source.s


For Agnoster theme for zsh, to remove the hostname:
In *_context function, change the following to:
prompt_segment black default "%(!.%{%F{yellow}%}.)$USER"


Install Plug for neovim
Investigate:
Need to put plug.vim(located in ~/.local/share/nvim/site/autoload) into ~/.vim/autoload
(At least needed for ranger to open files correctly)


Altera Quartus start command
:> /opt/altera/quartus/bin/quartus --64bit


In order to make grub discover Windows in dual boot mode:
Install os-prober. Nothing else required. On the next grub-mkconfig it should
find and add menuentry for windows.


Print character by its code
:> echo $'\ue621'


To find the class name of an application (click on the window with cursor)
:> xprop | grep WM_CLASS


Get info about OS(operating system), kernel version etc
:> uname -a


Get ip addresses, devices etc
:> ifconfig
OR(newer):
:> ip addr show [DEVICE]


Get disk space(used, left etc) [storage, memory]
:> df -ah
Get folder (directory) size [storage, memory]
:> du -sh
Get cumulative size of a dir
:> du -sh <PATH>


To temporarily give more space for /tmp folder
:> sudo mount -o remount,size=4G,noatime /tmp


Get info about opened ports, listeting services etc
(sudo to see PID/program name)
:> sudo netstat -tulpn


Get CPU(processor) usage of a particular process
:> ps aux | grep <NAME>


Get existing mounts
:> mount


Get binary number representation with Haskell
ghci:> import Text.Printf
ghci:> let a = 5207 in putStrLn $ printf "%d = %b" a a


Xmonad recompilation at startup problem
(Assumes you use stack to install xmonad and xmobar)
There's a 'build' file in .xmonad.
Rename it to whatever.
Otherwise(why???) it is executed at each startup(not xorg restart!), thus
forcing a (partial(because faster than usual)??) recompilation.


Xmonad key codes located at
/usr/include/X11/keysymdef.h


Downgrade a package with pacman
:> pacman -U https://archive.archlinux.org/packages/p/physfs/physfs-2.0.3-3-x86_64.pkg.tar.xz
Find out the package name from here:
https://archive.archlinux.org/packages/p/physfs/


Possible fix for printer with an udev rule
KERNEL=="lp[0-9]", SYMLINK+="%k", GROUP="lp"


If the clock got set wrongly because of windows, in order to revert it(from archwiki Time)
:> timedatectl set-local-rtc 0


Format
:> mkfs.ntfs /dev/sdb1
Quick format:
:> mkfs.ntfs /dev/sdb1 -Q
Format into FAT32(vfat)
(need [pac] dosfstools)
:> mkfs.vfat -n 'LABEL_NAME' -I /dev/sdb1


Turn off cores
(Note: cpu0 can't be turned off)
(Note: "0" - off, "1" - on)
:> sudo echo 0 | sudo tee /sys/devices/system/cpu/cpu1/online


Read man pages with Vim
:> man man | vim -


Xmonad just in case (if everything else fails you)
:> cd .xmonad
:> stack ghc xmonad


If Xmonad refuses to recompile due to missing haskell libraries => do
:> stack install
in its root folder


Display package dependencies in a tree format
:> pactree -s <PACKAGE>


Useful commands
Memory and swap usage
:> free -h
:> cat /proc/meminfo
Display stats with timestamp collumn every 1 second 5 times
:> vmstat -t 1 5
Current loggen in users
:> w

:> xargs


Convert image format
:> convert image.png image.jpg
For .png with transparent background
:> mogrify -format jpg -background black -flatten *.png
Convert (merge) multiple PDFs into one (with ghostscript)
:> gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=temp.pdf pdf1.pdf pdf2.pdf
Convert (merge) multiple images into one pdf (with img2pdf)
:> img2pdf img1.png img2.jpg -o out.pdf
[To make them the same size(fit): --pagesize A4]
Compress (could also convert) .jpg images to reduce size (and quality) with for-loop (in parallel??)
:> for file in IMG*; do convert -strip -interlace Plane -gaussian-blur 0.05 -quality 30% $file "small_$file"; echo "$file"; done
Compress and convert while changing extention. Using sampling-factor instead of blur for propably better results:
:> for file in *.HEIC; do convert -strip -interlace Plane -quality 70% -sampling-factor 4:2:0 $file "$(echo $file | awk -F '.' '{print $1}').jpg"; echo "$file"; don
To resize, add option:
-resize 512x512

.PNG is for logos, .JPG is for natural (camera) pictures with gradual transition between light to dark regions.



grep
-w === exact match (not allow the search pattern to be a part of the word)
-n === display line numbers
-B, -A, -C <number> === display <number> lines before, after, around (context)
-l === list only file names where the search succeeded
-i === case insensitive
-r === recursive (step into directories)
-P === use Perl-compatible regex


While typing a command in shell, to do that in VIM file
:> Ctrl+x+e


In shell to paste the last argument
:> Alt+.
In shell:
:> Ctrl+R === reverse search of history (Ctrl+R to get next)
:> Ctrl+G === to exit


Cut on ':' delimiter and get filed 2
:> cat file.txt | cut -d: -f2
Ignore white space, case insensitive
:> cat file.txt | sort -bf
Print only unique lines
:> uniq
Word count
:> wc


Find out what GPU you have
:> lspci -k | grep -A 2 -E "(VGA|3D)"


Print info about hardware
:> lspci


Display file list provided by local package
:> pacman -Ql <PACKAGE>


Find command
:> find . -name "*.txt"


At startup(??)
:> pulseaudio --start


To fix networking in VMWare (may require preceding reboot):
:> sudo vmware-networks --start


List all installed packages
:> pacman -Qe
:> yapurt -Qe


Sudoers file
igorek ALL=(ALL:ALL) NOPASSWD: /usr/bin/shutdown,/usr/bin/reboot,/usr/bin/pacman -Syu,/usr/bin/pacman -S,/usr/bin/pacman -Ss


Disable stuff here
/etc/modprobe.d/blacklist.conf
{
    blacklist i82975x_edac

    # To disable beep-speaker
    blacklist pcspkr

    # For NVIDIA, turn off Intel graphics
    # install i915 /usr/bin/false
    # install intel_agp /usr/bin/false
}


Extract .deb packages (data from it)
:> ar p mypackage.deb data.tar.xz | tar xJ


No internet with iptables
:> groupadd no-internet
(Validate: :> grep no-internet /etc/group)
:> usermod -a -G no-internet igorek
:> vim .local/bin/no-internet
{
#!/bin/bash
sg no-internet "$@"
}
:> chmod +x ./local/bin/no-internet
:> vim .no-internet_rules
{
#!/bin/bash
iptables -A OUTPUT -m owner --gid-owner no-internet -j DROP
}
:> chmod +x .no-internet_rules
:> sudo ./no-internet_rules
Logout, Login in order for group changes to take affect
Usage:
:> no-internet "ping google.com"


ehci and xhci, are USB standard interfaces for 2.0 and 3.0 respectively. ehci-pci or ehci_hcd is a Linux kernel driver for USB 2.0 handling, while xhci_hcd is the same for USB 3.0. ehci stands for Enhanced Host Controller Interface, xhci stands for eXtensible Host Controller Interface, while hcd stands for Host Controller Driver. They are low level things inside our Linux kernel.


Find out what other IPs there are on the network
:> sudo nmap -sn 192.168.1.0/24


Repeat command periodically every 3 seconds
:> watch -n 3 ip addr show


Clear terminal mess after using ncurses
:> stty sane
OR maybe
:> reset
if the first one didn't do the job.
Might need to use Ctrl+j instead of <CR>


Check current kernel BOOT parameters
:> cat /proc/cmdline


PulseAudio, pavucontrol, pactl
[~/.config/pulse/default.pa]
:> pactl list sinks [short]
:> pactl set-sink-volume @DEFAULT_SINK@ -5%
:> pactl set-sink-mute @DEFAULT_SINK@ toggle
:> pactl load-module module-switch-on-connect


In order to recompile and restart xmonad:
:> xmonad --recompile
[WIN+q]


View journal from last boot
:> journalctl -b -1


System shutdown time delay:
[/etc/systemd/system.conf]
DefaultTimeoutStopSec=90s


Debug faulty shutdowns:
https://freedesktop.org/wiki/Software/systemd/Debugging/#Shutdown_Completes_Eventually
Boot flags:
vsyscall=emulate system.log_level=debug system.log_target=kmsg log_buf_len=1M printk.devkmsg=on enforcing=0

Grub boot system settings (falgs):
[/etc/default/grub]
GRUB_CMDLINE_LINUX_DEFAULT="quiet"


youtube-dl specify output name
:> youtube-dl -f 'bestaudio' -o '%(title)s.%(ext)s' URL


Move a program so that it is available everywhere
:> sudo rsync -avh TARGET /usr/local/bin/


Convert VOB to MKV with ffmpeg:
:> ffmpeg -analyzeduration 100M -probesize 100M -i inputvob.vob -codec:v libx264 -crf 21 -codec:a libmp3lame -qscale:a 0 -codec:s copy -max_muxing_queue_size 1024 -map 0:1 -map 0:2 -map 0:3 -map 0:4 -map 0:5 -map 0:6 newout.mkv
And give them metadata:
:> ffmpeg -i newout.mkv -map 0:0 -map 0:1 -map 0:2 -map 0:3 -map 0:5 -metadata:s:a:0 language=fre -metadata:s:a:0 title=French original -metadata:s:s:0 language=fre -metadata:s:s:0 title=French -metadata:s:s:1 language=eng -metadata:s:s:1 title=English -metadata:s:s:2 language=ger -metadata:s:s:2 title=German -c:v copy -c:a copy -c:s copy NotreDameDeParis.mkv


Record screen with audio
(Find out the name of the input device with :> pactl list sources)
(Link with description:
https://www.youtube.com/watch?v=mEV2O8C272g
)
:> ffmpeg -f pulse -ac 2 -i alsa_output.pci-0000_00_1f.3.analog-stereo.monitor -filter_complex amix=inputs=1 -f x11grab -r 30 -s 1920x1080 -i :0.0+0,0 -vcodec libx264 -preset veryfast -crf 18 -acodec libmp3lame -q:a 1 /home/igorek/Stuff/testout.mkv
To modify the output resolution:
:> ffmpeg -f pulse -ac 2 -i alsa_output.pci-0000_00_1f.3.analog-stereo.monitor -filter_complex amix=inputs=1 -f x11grab -r 30 -s 1920x1080 -i :0.0+0,0 -vf scale=1366:768 -vcodec libx264 -preset veryfast -crf 18 -acodec libmp3lame -q:a 1 FurMasik.mkv


Cut video with ffmpeg
(-t for duration. Timestamps are either in seconds (sec.ms) or full)
:> ffmpeg -ss 01:38:09.0 -i input.mp4 -c copy -t 65 out.mkv


For loop:
:> for subt in *.srt; do mv $subt "._$subt"; done


Get you IP address as seen from the internet
:> curl -4 icanhazip.com


Possible fix for ssh remote connection hang
1) -X flag at the end [probably set by the first setting]
2) .ssh/config:
ForwardX11 yes
ServerAliveInterval 15
ServerAliveCountMax 3


Pacman (and trizen AUR) parallel compilation
[/etc/makepkg.conf]
MAKEFLAGS="-j8"


virt-manager
Start services:
libvirtd.service virtlogd.service


Connect to Amazon AWS via ssh
:> ssh -i "~/Stuff/igorek-keypair.pem" ubuntu@ec2-52-58-254-176.eu-central-1.compute.amazonaws.com -X
* Flag -X to prevent freezing


Audio, Alsa, Pavucontrol, Pactl
Real-time echo test:
:> pactl load-module module-loopback
:> pactl unload-module module-loopback
(Is shown in pavucontrol in the Playback tab)

After reboot, try:
:> alsactl restore
to unmute.


In other words volatile registers are caller saved registers, as opposed to callee saved


Display webcam video
:> mpv /dev/video0

Useful utility to track keypresses
:> xev -event keyboard


To fix python dependency for Neovim:
:> pip3 install --user pynvim


Clone (download) a subfolder of github repository:
:> svn checkout <LINK>
BUT replace /tree/master with /trunk


Fixed screen tearing (possibly because of mesa) with:
[/etc/environment]:
{
MESA_LOADER_DRIVER_OVERRIDE=i965
}


Command-line calculator:
:> echo "2+3" | bc -l
:> netcat 10.0.3.101 $(echo "2+3" | bc -l)


===============================================================================
============================ NVIDIA, Second monitor, Samsung ==================
===============================================================================
================================
================ The new way, with optimus-manager
================================
Make sure there are no video-related settings files in /etc/X11/xorg.conf.d/

:> pacman -S optimus-manager bbswitch
(bbswitch to be able to turn off NVIDIA completely when in intel mode)

In .xinitrc execute /usr/bin/prime-offload at the beginning

In /etc/optimus-manager/optimus-manager.conf (if does not exist, copy default from /usr/share/optimus-manager.conf),
make sure that:
{
    [optimus]
    switching=bbswitch
    pci_power_control=no
    pci_remove=no
    pci_reset=no
}
(From https://github.com/Askannz/optimus-manager/wiki/A-guide--to-power-management-options)

To specify the GPU via a kernel parameter:
optimus-manager.startup=nvidia

To add custom GRUB boot entries:
* remove the executable bit from the default 10-linux
* copy from /boot/grub/grub.cfg the settings from the default linux section into a new file (15-custom)
* make it executable
* ...and modify to have custom kernel paratemers
================================
================ Manual, old way
================================
:> svim /etc/default/grub
{
GRUB_CMDLINE_LINUX_DEFAULT="... nvidia-drm.modeset=1"
}
:> sudo grub-mkconfig -o /boot/grub/grub.cfg

:> svim /etc/mkinitcpio.conf
{
MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)
}
:> sudo mkinitcpio -p linux

:> vim .xinitrc
{
xrandr --setprovideroutputsource modesetting NVIDIA-0
xrandr --auto
xrandr --output "HDMI-0" --off
xrandr --output "HDMI-0" --auto --primary --output "eDP-1-1" --off
}

:> vim /etc/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf
{
Section "Module"
    Load "modesetting"
EndSection


Section "Device"
    Identifier "nvidia"
    Driver "nvidia"
    BusID  "PCI:1:0:0"
    Option "AllowEmptyInitialConfiguration"
    Option "NoLogo" "true"
    Option "ConnectedMonitor" "DFP"
EndSection
}

Arch Wiki for KMS, at the bottom, "Disabling modesetting" may be related to blank (black) screen and "no signal" from the display
===============================================================================
===============================================================================
===============================================================================



======== New fonts notes =============
/usr/share/fonts/Sauce/font.ttf
:> fc-cache -fv



Errors containing "Can't open Display" and "no protocol specified" are related
to setting the DISPLAY=:0 and XAUTHORITY=/home/igorek/.Xauthority respectively.


========== Suspend/sleep ===============
Log in:
:> journalctl -b -u systemd-suspend.service

Hook script in:
/usr/lib/systemd/system-sleep/my_hook
{
#!/bin/sh

export DISPLAY=:0
export XAUTHORITY=/home/igorek/.Xauthority

case $1/$2 in
    pre/*)
        /home/igorek/.mon_small.zsh
        ;;
    post/*)
        /home/igorek/.mon_large.zsh
        ;;
esac
}


German Uni
patrik.stoer@fau.de


To fix coloring (and maybe environmental variables) in console(terminal)
:> tput reset


Redirect stderr output:
./stuff > out.txt 2>&1


Rename files with common prefix,
Replace pattern in many files:
:> for file in prefix_*; do mv "$file" "${file/prefix_/new_prefix}"; done


Print second and third columns, separated by comma:
:> cut -d, -f 2,3 file.txt


Make all text uppercase:
:> cat file.txt | tr "[:lower:]" "[:upper:]"


Replace all occurances of a letter:
:> cat file.txt | tr W J


Generate pacman mirrors:
https://www.archlinux.org/mirrorlist/
/etc/pacman.d/mirrorlist
:> sudo pacman -Syyu


Add a label to a filesystem:
:> sudo e2label /dev/nvme0n1p4 "my_arch"
View existing labels:
:> ls -l /dev/disk/by-label


View kernel parameters you booted with:
:> cat /proc/cmdline
